#!/usr/bin/env python3

# Import Dependencies
import rospy 
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import math

class TurtlesimNavigation:
    def __init__(self):
        # Initialize class variables
        self.goal_x = 0
        self.goal_y = 0
        self.goal_reached = False

        # Initialize the node
        rospy.init_node('turtlesim_navigation_node', anonymous=True)

        # Initialize subscribers  
        rospy.Subscriber("/turtle1/pose", Pose, self.pose_callback)

        # Initialize publishers
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

        # Wait for the publisher/subscriber connections to establish
        rospy.sleep(1)

        # Get the goal position from the user
        self.goal_x = float(input("Enter the goal x coordinate: "))
        self.goal_y = float(input("Enter the goal y coordinate: "))

        # Start moving the turtle towards the goal
        self.move_to_goal()

        # Spin to keep the node alive
        rospy.spin()

    def pose_callback(self, msg):
        # Check if the goal is reached
        if not self.goal_reached:
            # Calculate the distance to the goal
            distance_to_goal = math.sqrt((self.goal_x - msg.x)**2 + (self.goal_y - msg.y)**2)

            # Check if the goal is reached with a tolerance
            if distance_to_goal < 0.1:
                rospy.loginfo("Goal reached!")
                self.goal_reached = True
                self.stop_turtle()

    def move_to_goal(self):
        # Calculate the angle to rotate towards the goal
        desired_angle = math.atan2(self.goal_y, self.goal_x)

        # Create a Twist message to rotate
        rotate_cmd = Twist()
        rotate_cmd.angular.z = desired_angle
        self.velocity_publisher.publish(rotate_cmd)

        # Create a Twist message to move forward
        move_cmd = Twist()
        move_cmd.linear.x = math.sqrt(self.goal_x**2 + self.goal_y**2)  # Move distance
        self.velocity_publisher.publish(move_cmd)

    def stop_turtle(self):
        # Stop the turtle
        stop_cmd = Twist()
        self.velocity_publisher.publish(stop_cmd)

if __name__ == '__main__': 
    try: 
        TurtlesimNavigation()
    except rospy.ROSInterruptException: 
        pass
